const mongoose = require('mongoose');
const MeatSurvey = require('../DB/meatSurvey');

const createMeatSurvey = async ( req, res) => {
  /*
  #swagger.tags = ['Meat Department'] 
  #swagger.security = [{
    "JWT": []
  }]
  */
    console.log("Adding survey...")
        const survey = new MeatSurvey({
           surveyNum: req.body.surveyNum,
           week: req.body.week,
           itemName: req.body.itemName,
           salePrice: req.body.salePrice,         
           firstDelivery: req.body.firstDelivery,
           secondDelivery: req.body.secondDelivery,
           thirdDelivery: req.body.thirdDelivery,
           forthDelivery: req.body.forthDelivery,
           fifthDelivery: req.body.fifthDelivery,
           amountRecived: req.body.amountRecived,
           amountRemaining: req.body.amountRemaining,
           ranOut: req.body.ranOut
       })
       try{
       const savedSurvey = await survey.save();
       if (savedSurvey.acknowledged) {
         //res.status(201).json(savedSurvey);
         res.json(savedSurvey);
         console.log("survey saved");
       }
       else {
         res.status(500)
       }
      }catch(err){
        res.json({message:err});
      }
     };

const getAll = async ( req, res) => {
 /*
  #swagger.tags = ['Meat Department'] 
  #swagger.security = [{
    "JWT": []
  }]
  */
    console.log("Getting survey...")
    try{
      const allSurveys = await MeatSurvey.find();
      res.json(allSurveys);
    }catch(err){
      res.json({message:err});
    }
  };

const findById = async ( req, res) => {
 /*
  #swagger.tags = ['Meat Department'] 
  #swagger.security = [{
    "JWT": []
  }]
*/
  try{
  if (!mongoose.Types.ObjectId.isValid(req.params.id)) {
      res.status(400).json('Must use a valid id to find a survey.');
      }
      else{
         console.log("Getting survey...");
         const surveyByID = await MeatSurvey.findById(req.params.id);
         console.log(surveyByID)
         if (surveyByID === null){
           res.status(400).json('Survey Not Found.');
          }
          else{
            res.json(surveyByID);
      }
    }
    }catch(err){
    res.json({message:err});
  }
  }

const findBySurveyNumber = async ( req, res) => {
  /*
  #swagger.tags = ['Meat Department'] 
  #swagger.security = [{
    "JWT": []
  }]
  */
  try{  
    console.log("Getting survey...")
    const bySurveyNumber = await MeatSurvey.find({surveyNum: { $regex: '.*[a-zA-Z0-9]*' + req.params.surveyNum +'.*' }});
    if (Object.keys(bySurveyNumber).length === 0){
      res.status(400).json('Survey Not Found.');
    }else{
     res.json(bySurveyNumber);
    }
  }catch(err){
    res.json({message:err});
  }  
};

const findByWeek = async ( req, res) => {
  /*
  #swagger.tags = ['Meat Department'] 
  #swagger.security = [{
    "JWT": []
  }]
  */
  try{
    console.log("Getting survey...")
    const byWeek = await MeatSurvey.find({week: { $regex: '.*[a-zA-Z0-9]*' + req.params.week + '.*' }});   
    if (Object.keys(byWeek).length === 0){
      res.status(400).json('Survey Not Found.');     
    }else{
      res.json(byWeek);
    }
  }catch(err){
    res.json({message:err});
  }
};

const findByItemName = async ( req, res) => {
  /*
  #swagger.tags = ['Meat Department'] 
  #swagger.security = [{
    "JWT": []
  }]
  */
  try{
    console.log("Getting survey...")
    const byItemName = await MeatSurvey.find({itemName: { $regex: '.*[a-zA-Z0-9]*' + req.params.itemName + '.*' }});   
    if (Object.keys(byItemName).length === 0){
      res.status(400).json('Survey Not Found.');     
    }else{
      res.json(byItemName);
    }
  }catch(err){
    res.json({message:err});
  }
};

const updateSurvey = async ( req, res) => {
  /*
  #swagger.tags = ['Meat Department'] 
  #swagger.security = [{
    "JWT": []
  }]
  */
    console.log("Updateing survey...")
    try{
      if (!mongoose.Types.ObjectId.isValid(req.params.id)) {
        res.status(400).json('Must use a valid id to find a survey.');
        }
        else{
            const update = await MeatSurvey.updateOne({_id: req.params.id},
            {$set:
                {           
                    surveyNum: req.body.surveyNum,           
                    week: req.body.week,           
                    itemName: req.body.itemName,           
                    salePrice: req.body.salePrice,           
                    firstDelivery: req.body.firstDelivery,           
                    secondDelivery: req.body.secondDelivery,           
                    thirdDelivery: req.body.thirdDelivery,           
                    forthDelivery: req.body.forthDelivery,           
                    fifthDelivery: req.body.fifthDelivery,           
                    amountRecived: req.body.amountRecived,           
                    amountRemaining: req.body.amountRemaining,           
                    ranOut: req.body.ranOut
                }
            });
            console.log("update: " + update.matchedCount);
            if (update.matchedCount === 0){
              res.status(400).json('Survey Not Found.');
             }else{
             res.json(update);
          }
          }
       }catch(err){
         res.json({message:err});
       }
     };
     
const deleteSurvey = async ( req, res) => {
  /*
  #swagger.tags = ['Meat Department'] 
  #swagger.security = [{
    "JWT": []
  }]
  */
        try{
          if (!mongoose.Types.ObjectId.isValid(req.params.id)) {
            res.status(400).json('Must use a valid id to find a survey.');
            }
            else{              
            console.log("Deleting survey...")
          const deleteSurvey = await MeatSurvey.deleteOne({_id: req.params.id});
          if (deleteSurvey.deletedCount === 0){
            res.status(400).json('Survey Not Found.');
           }else{
           res.json(deleteSurvey);
        }
            }
        }catch(err){
          res.json({message:err});
        }
    };
  module.exports = {
      createMeatSurvey,
      getAll,
      findById,
      findBySurveyNumber,
      findByWeek,
      findByItemName,
      updateSurvey,
      deleteSurvey
  };